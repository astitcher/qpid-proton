# Type stub file for cproton - lowest level of proton python binding

from typing import *

class pn_object_t: ...

class pn_transport_t: ...
class pn_ssl_t: ...
class pn_sasl_t: ...

class pn_connection_t: ...
class pn_session_t: ...
class pn_link_t: ...
class pn_delivery_t: ...
class pn_message_t: ...

class pn_data_t: ...

def pn_message_decode(msg: pn_message_t, BIN_IN: bytes) -> int: ...
def pn_message_encode(msg: pn_message_t, size: int) -> Tuple[int, bytes]: ...
def pn_link_send(link: pn_link_t, BIN_IN: bytes) -> int: ...
def pn_link_recv(link: pn_link_t, size: int) -> Tuple[int, bytes]: ...
def pn_transport_push(transport: pn_transport_t, BIN_IN: bytes) -> int: ...
def pn_transport_peek(transport: pn_transport_t, BIN_OUT: bytes) -> int: ...
def pn_delivery(link: pn_link_t, STRING: str) -> pn_delivery_t: ...
def pn_delivery_tag(delivery: pn_delivery_t, BIN_OUT: bytes) -> None: ...
def pn_data_decode(data: pn_data_t, BIN_IN: bytes) -> int: ...
def pn_data_encode(data: pn_data_t, size: int) -> Tuple[int, bytes]: ...
def pn_data_format(data: pn_data_t, size: int) -> Tuple[int, str]: ...
def pn_ssl_get_cipher_name(ssl: pn_ssl_t, OUTPUT: str) -> bool: ...
def pn_ssl_get_protocol_name(ssl: pn_ssl_t, OUTPUT: str) -> bool: ...
def pn_ssl_get_remote_subject_subfield(ssl: pn_ssl_t, field: str) -> str: ...
def pn_ssl_get_cert_fingerprint(ssl: pn_ssl_t, OUTPUT, hash_alg: str) -> int: ...
def pn_ssl_get_peer_hostname(ssl: pn_ssl_t, VTEXT_OUT: str) -> int: ...

def pn_pyref_incref(object): ...
def pn_pyref_decref(object): ...
def pn_pyref_refcount(object): ...
def pn_pyref_reify(object): ...
def pn_py2void(object): ...
def pn_void2py(object): ...
def pn_cast_pn_void(object): ...

PN_PYREF : int = ...
PNI_PYREF : int = ...


def pni_pyh(handler): ...
def pni_pyh_finalize(handler): ...
def pni_pydispatch(handler, event, type): ...
def pn_pyhandler(handler): ...
def pn_pytracer(transport, message): ...
def pn_transport_set_pytracer(transport, obj): ...
def pn_transport_get_pytracer(transport): ...

# PROTON_IMPORT_EXPORT_H

PN_VERSION_MAJOR : int = ...
PN_VERSION_MINOR : int = ...
PN_VERSION_POINT : int = ...

# PROTON_TYPES_H

PN_MILLIS_MAX : int = ...

def pn_bytes(size, start): ...
def pn_rwbytes(size, start): ...

# PROTON_OBJECT_H

def pn_class_id(clazz): ...
def pn_class_name(clazz): ...
def pn_class_new(clazz, size): ...
def pn_class_incref(clazz, object): ...
def pn_class_refcount(clazz, object): ...
def pn_class_decref(clazz, object): ...
def pn_class_free(clazz, object): ...
def pn_class_reify(clazz, object): ...
def pn_class_hashcode(clazz, object): ...
def pn_class_compare(clazz, a, b): ...
def pn_class_equals(clazz, a, b): ...
def pn_class_inspect(clazz, object, dst): ...
def pn_void_new(clazz, size): ...
def pn_void_incref(object): ...
def pn_void_decref(object): ...
def pn_void_refcount(object): ...
def pn_void_hashcode(object): ...
def pn_void_compare(a, b): ...
def pn_void_inspect(object, dst): ...
def pn_object_new(clazz, size): ...
def pn_object_reify(object): ...
def pn_object_incref(object): ...
def pn_object_refcount(object): ...
def pn_object_decref(object): ...
def pn_object_free(object): ...
def pn_incref(object): ...
def pn_decref(object): ...
def pn_refcount(object): ...
def pn_free(object): ...
def pn_class(object): ...
def pn_hashcode(object): ...
def pn_compare(a, b): ...
def pn_equals(a, b): ...
def pn_inspect(object, dst): ...

PN_REFCOUNT : int = ...

def pn_list(clazz, capacity): ...
def pn_list_size(list): ...
def pn_list_get(list, index): ...
def pn_list_set(list, index, value): ...
def pn_list_add(list, value): ...
def pn_list_pop(list): ...
def pn_list_index(list, value): ...
def pn_list_remove(list, value): ...
def pn_list_del(list, index, n): ...
def pn_list_clear(list): ...
def pn_list_iterator(list, iter): ...
def pn_list_minpush(list, value): ...
def pn_list_minpop(list): ...

PN_REFCOUNT_KEY : int = ...
PN_REFCOUNT_VALUE : int = ...

def pn_map(key, value, capacity, load_factor): ...
def pn_map_size(map): ...
def pn_map_put(map, key, value): ...
def pn_map_get(map, key): ...
def pn_map_del(map, key): ...
def pn_map_head(map): ...
def pn_map_next(map, entry): ...
def pn_map_key(map, entry): ...
def pn_map_value(map, entry): ...
def pn_hash(clazz, capacity, load_factor): ...
def pn_hash_size(hash): ...
def pn_hash_put(hash, key, value): ...
def pn_hash_get(hash, key): ...
def pn_hash_del(hash, key): ...
def pn_hash_head(hash): ...
def pn_hash_next(hash, entry): ...
def pn_hash_key(hash, entry): ...
def pn_hash_value(hash, entry): ...
def pn_string(bytes): ...
def pn_stringn(bytes, n): ...
def pn_string_get(string): ...
def pn_string_size(string): ...
def pn_string_set(string, bytes): ...
def pn_string_setn(string, bytes, n): ...
def pn_string_put(string, dst): ...
def pn_string_clear(string): ...
def pn_string_format(string, format): ...
def pn_string_addf(string, format): ...
def pn_string_grow(string, capacity): ...
def pn_string_buffer(string): ...
def pn_string_capacity(string): ...
def pn_string_resize(string, size): ...
def pn_string_copy(string, src): ...
def pn_iterator(): ...
def pn_iterator_start(iterator, next, size): ...
def pn_iterator_next(iterator): ...
def pn_record(): ...
def pn_record_def(record, key, clazz): ...
def pn_record_has(record, key): ...
def pn_record_get(record, key): ...
def pn_record_set(record, key, value): ...
def pn_record_clear(record): ...

# PROTON_ERROR_H

PN_OK : int = ...
PN_EOS : int = ...
PN_ERR : int = ...
PN_OVERFLOW : int = ...
PN_UNDERFLOW : int = ...
PN_STATE_ERR : int = ...
PN_ARG_ERR : int = ...
PN_TIMEOUT : int = ...
PN_INTR : int = ...
PN_INPROGRESS : int = ...
PN_OUT_OF_MEMORY : int = ...
PN_ABORTED : int = ...

def pn_code(code): ...
def pn_error(): ...
def pn_error_free(error): ...
def pn_error_clear(error): ...
def pn_error_set(error, code, text): ...
def pn_error_code(error): ...
def pn_error_text(error): ...
def pn_error_copy(error, src): ...

# PROTON_CONDITION_H

def pn_condition_is_set(condition): ...
def pn_condition_clear(condition): ...
def pn_condition_get_name(condition): ...
def pn_condition_set_name(condition, name): ...
def pn_condition_get_description(condition): ...
def pn_condition_set_description(condition, description): ...
def pn_condition_info(condition): ...
def pn_condition_is_redirect(condition): ...
def pn_condition_redirect_host(condition): ...
def pn_condition_redirect_port(condition): ...
def pn_condition_copy(dest, src): ...
def pn_condition(): ...
def pn_condition_free(arg1): ...

# PROTON_CONNECTION_H

PN_LOCAL_UNINIT : int = ...
PN_LOCAL_ACTIVE : int = ...
PN_LOCAL_CLOSED : int = ...
PN_REMOTE_UNINIT : int = ...
PN_REMOTE_ACTIVE : int = ...
PN_REMOTE_CLOSED : int = ...
PN_LOCAL_MASK : int = ...
PN_REMOTE_MASK : int = ...

def pn_connection(): ...
def pn_connection_free(connection): ...
def pn_connection_release(connection): ...
def pn_connection_error(connection): ...
def pn_connection_collect(connection, collector): ...
def pn_connection_collector(connection): ...
def pn_connection_get_context(connection): ...
def pn_connection_set_context(connection, context): ...
def pn_connection_attachments(connection): ...
def pn_connection_state(connection): ...
def pn_connection_open(connection): ...
def pn_connection_close(connection): ...
def pn_connection_reset(connection): ...
def pn_connection_condition(connection): ...
def pn_connection_remote_condition(connection): ...
def pn_connection_get_container(connection): ...
def pn_connection_set_container(connection, container): ...
def pn_connection_set_user(connection, user): ...
def pn_connection_set_password(connection, password): ...
def pn_connection_get_user(connection): ...
def pn_connection_get_hostname(connection): ...
def pn_connection_set_hostname(connection, hostname): ...
def pn_connection_remote_container(connection): ...
def pn_connection_remote_hostname(connection): ...
def pn_connection_offered_capabilities(connection): ...
def pn_connection_desired_capabilities(connection): ...
def pn_connection_properties(connection): ...
def pn_connection_remote_offered_capabilities(connection): ...
def pn_connection_remote_desired_capabilities(connection): ...
def pn_connection_remote_properties(connection): ...
def pn_connection_transport(connection): ...

# PROTON_SESSION_H

def pn_session(connection): ...
def pn_session_free(session): ...
def pn_session_get_context(session): ...
def pn_session_set_context(session, context): ...
def pn_session_attachments(session): ...
def pn_session_state(session): ...
def pn_session_error(session): ...
def pn_session_condition(session): ...
def pn_session_remote_condition(session): ...
def pn_session_connection(session): ...
def pn_session_open(session): ...
def pn_session_close(session): ...
def pn_session_get_incoming_capacity(session): ...
def pn_session_set_incoming_capacity(session, capacity): ...
def pn_session_get_outgoing_window(session): ...
def pn_session_set_outgoing_window(session, window): ...
def pn_session_outgoing_bytes(session): ...
def pn_session_incoming_bytes(session): ...
def pn_session_head(connection, state): ...
def pn_session_next(session, state): ...

# PROTON_LINK_H

def pn_sender(session, name): ...
def pn_receiver(session, name): ...
def pn_link_free(link): ...
def pn_link_get_context(link): ...
def pn_link_set_context(link, context): ...
def pn_link_attachments(link): ...
def pn_link_name(link): ...
def pn_link_is_sender(link): ...
def pn_link_is_receiver(link): ...
def pn_link_state(link): ...
def pn_link_error(link): ...
def pn_link_condition(link): ...
def pn_link_remote_condition(link): ...
def pn_link_session(link): ...
def pn_link_head(connection, state): ...
def pn_link_next(link, state): ...
def pn_link_open(link): ...
def pn_link_close(link): ...
def pn_link_detach(link): ...
def pn_link_source(link): ...
def pn_link_target(link): ...
def pn_link_remote_source(link): ...
def pn_link_remote_target(link): ...
def pn_link_current(link): ...
def pn_link_advance(link): ...
def pn_link_credit(link): ...
def pn_link_queued(link): ...
def pn_link_remote_credit(link): ...
def pn_link_get_drain(link): ...
def pn_link_drained(link): ...
def pn_link_available(link): ...

PN_SND_UNSETTLED : int = ...
PN_SND_SETTLED : int = ...
PN_SND_MIXED : int = ...
PN_RCV_FIRST : int = ...
PN_RCV_SECOND : int = ...

def pn_link_snd_settle_mode(link): ...
def pn_link_rcv_settle_mode(link): ...
def pn_link_set_snd_settle_mode(link, mode): ...
def pn_link_set_rcv_settle_mode(link, mode): ...
def pn_link_remote_snd_settle_mode(link): ...
def pn_link_remote_rcv_settle_mode(link): ...
def pn_link_unsettled(link): ...
def pn_unsettled_head(link): ...
def pn_unsettled_next(delivery): ...
def pn_link_offered(sender, credit): ...
def pn_link_flow(receiver, credit): ...
def pn_link_drain(receiver, credit): ...
def pn_link_set_drain(receiver, drain): ...
def pn_link_draining(receiver): ...
def pn_link_max_message_size(link): ...
def pn_link_set_max_message_size(link, size): ...
def pn_link_remote_max_message_size(link): ...

# PROTON_TERMINUS_H

PN_UNSPECIFIED : int = ...
PN_SOURCE : int = ...
PN_TARGET : int = ...
PN_COORDINATOR : int = ...
PN_NONDURABLE : int = ...
PN_CONFIGURATION : int = ...
PN_DELIVERIES : int = ...
PN_EXPIRE_WITH_LINK : int = ...
PN_EXPIRE_WITH_SESSION : int = ...
PN_EXPIRE_WITH_CONNECTION : int = ...
PN_EXPIRE_NEVER : int = ...
PN_DIST_MODE_UNSPECIFIED : int = ...
PN_DIST_MODE_COPY : int = ...
PN_DIST_MODE_MOVE : int = ...

def pn_terminus_get_type(terminus): ...
def pn_terminus_set_type(terminus, type): ...
def pn_terminus_get_address(terminus): ...
def pn_terminus_set_address(terminus, address): ...
def pn_terminus_get_distribution_mode(terminus): ...
def pn_terminus_set_distribution_mode(terminus, mode): ...
def pn_terminus_get_durability(terminus): ...
def pn_terminus_set_durability(terminus, durability): ...
def pn_terminus_get_expiry_policy(terminus): ...
def pn_terminus_set_expiry_policy(terminus, policy): ...
def pn_terminus_get_timeout(terminus): ...
def pn_terminus_set_timeout(terminus, timeout): ...
def pn_terminus_is_dynamic(terminus): ...
def pn_terminus_set_dynamic(terminus, dynamic): ...
def pn_terminus_properties(terminus): ...
def pn_terminus_capabilities(terminus): ...
def pn_terminus_outcomes(terminus): ...
def pn_terminus_filter(terminus): ...
def pn_terminus_copy(terminus, src): ...

# PROTON_DELIVERY_H

def pn_delivery_get_context(delivery): ...
def pn_delivery_set_context(delivery, context): ...
def pn_delivery_attachments(delivery): ...
def pn_delivery_link(delivery): ...
def pn_delivery_local(delivery): ...
def pn_delivery_local_state(delivery): ...
def pn_delivery_remote(delivery): ...
def pn_delivery_remote_state(delivery): ...
def pn_delivery_settled(delivery): ...
def pn_delivery_pending(delivery): ...
def pn_delivery_partial(delivery): ...
def pn_delivery_aborted(delivery): ...
def pn_delivery_writable(delivery): ...
def pn_delivery_readable(delivery): ...
def pn_delivery_updated(delivery): ...
def pn_delivery_update(delivery, state): ...
def pn_delivery_clear(delivery): ...
def pn_delivery_current(delivery): ...
def pn_delivery_abort(delivery): ...
def pn_delivery_settle(delivery): ...
def pn_delivery_dump(delivery): ...
def pn_delivery_buffered(delivery): ...
def pn_work_head(connection): ...
def pn_work_next(delivery): ...

# PROTON_DISPOSITION_H

PN_RECEIVED : int = ...
PN_ACCEPTED : int = ...
PN_REJECTED : int = ...
PN_RELEASED : int = ...
PN_MODIFIED : int = ...

def pn_disposition_type(disposition): ...
def pn_disposition_type_name(disposition_type): ...
def pn_disposition_condition(disposition): ...
def pn_disposition_data(disposition): ...
def pn_disposition_get_section_number(disposition): ...
def pn_disposition_set_section_number(disposition, section_number): ...
def pn_disposition_get_section_offset(disposition): ...
def pn_disposition_set_section_offset(disposition, section_offset): ...
def pn_disposition_is_failed(disposition): ...
def pn_disposition_set_failed(disposition, failed): ...
def pn_disposition_is_undeliverable(disposition): ...
def pn_disposition_set_undeliverable(disposition, undeliverable): ...
def pn_disposition_annotations(disposition): ...

# PROTON_TRANSPORT_H

PN_TRACE_OFF : int = ...
PN_TRACE_RAW : int = ...
PN_TRACE_FRM : int = ...
PN_TRACE_DRV : int = ...
PN_TRACE_EVT : int = ...

def pn_transport(): ...
def pn_transport_set_server(transport): ...
def pn_transport_free(transport): ...
def pn_transport_get_user(transport): ...
def pn_transport_require_auth(transport, required): ...
def pn_transport_is_authenticated(transport): ...
def pn_transport_require_encryption(transport, required): ...
def pn_transport_is_encrypted(transport): ...
def pn_transport_condition(transport): ...
def pn_transport_error(transport): ...
def pn_transport_bind(transport, connection): ...
def pn_transport_unbind(transport): ...
def pn_transport_trace(transport, trace): ...
def pn_transport_set_tracer(transport, tracer): ...
def pn_transport_get_tracer(transport): ...
def pn_transport_get_context(transport): ...
def pn_transport_set_context(transport, context): ...
def pn_transport_attachments(transport): ...
def pn_transport_log(transport, message): ...
def pn_transport_logf(transport, fmt): ...
def pn_transport_get_channel_max(transport): ...
def pn_transport_set_channel_max(transport, channel_max): ...
def pn_transport_remote_channel_max(transport): ...
def pn_transport_get_max_frame(transport): ...
def pn_transport_set_max_frame(transport, size): ...
def pn_transport_get_remote_max_frame(transport): ...
def pn_transport_get_idle_timeout(transport): ...
def pn_transport_set_idle_timeout(transport, timeout): ...
def pn_transport_get_remote_idle_timeout(transport): ...
def pn_transport_input(transport, bytes, available): ...
def pn_transport_output(transport, bytes, size): ...
def pn_transport_capacity(transport): ...
def pn_transport_tail(transport): ...
def pn_transport_process(transport, size): ...
def pn_transport_close_tail(transport): ...
def pn_transport_pending(transport): ...
def pn_transport_head(transport): ...
def pn_transport_pop(transport, size): ...
def pn_transport_close_head(transport): ...
def pn_transport_quiesced(transport): ...
def pn_transport_head_closed(transport): ...
def pn_transport_tail_closed(transport): ...
def pn_transport_closed(transport): ...
def pn_transport_tick(transport, now): ...
def pn_transport_get_frames_output(transport): ...
def pn_transport_get_frames_input(transport): ...
def pn_transport_connection(transport): ...

# PROTON_EVENT_H

PN_EVENT_NONE : int = ...
PN_REACTOR_INIT : int = ...
PN_REACTOR_QUIESCED : int = ...
PN_REACTOR_FINAL : int = ...
PN_TIMER_TASK : int = ...
PN_CONNECTION_INIT : int = ...
PN_CONNECTION_BOUND : int = ...
PN_CONNECTION_UNBOUND : int = ...
PN_CONNECTION_LOCAL_OPEN : int = ...
PN_CONNECTION_REMOTE_OPEN : int = ...
PN_CONNECTION_LOCAL_CLOSE : int = ...
PN_CONNECTION_REMOTE_CLOSE : int = ...
PN_CONNECTION_FINAL : int = ...
PN_SESSION_INIT : int = ...
PN_SESSION_LOCAL_OPEN : int = ...
PN_SESSION_REMOTE_OPEN : int = ...
PN_SESSION_LOCAL_CLOSE : int = ...
PN_SESSION_REMOTE_CLOSE : int = ...
PN_SESSION_FINAL : int = ...
PN_LINK_INIT : int = ...
PN_LINK_LOCAL_OPEN : int = ...
PN_LINK_REMOTE_OPEN : int = ...
PN_LINK_LOCAL_CLOSE : int = ...
PN_LINK_REMOTE_CLOSE : int = ...
PN_LINK_LOCAL_DETACH : int = ...
PN_LINK_REMOTE_DETACH : int = ...
PN_LINK_FLOW : int = ...
PN_LINK_FINAL : int = ...
PN_DELIVERY : int = ...
PN_TRANSPORT : int = ...
PN_TRANSPORT_AUTHENTICATED : int = ...
PN_TRANSPORT_ERROR : int = ...
PN_TRANSPORT_HEAD_CLOSED : int = ...
PN_TRANSPORT_TAIL_CLOSED : int = ...
PN_TRANSPORT_CLOSED : int = ...
PN_SELECTABLE_INIT : int = ...
PN_SELECTABLE_UPDATED : int = ...
PN_SELECTABLE_READABLE : int = ...
PN_SELECTABLE_WRITABLE : int = ...
PN_SELECTABLE_ERROR : int = ...
PN_SELECTABLE_EXPIRED : int = ...
PN_SELECTABLE_FINAL : int = ...
PN_CONNECTION_WAKE : int = ...
PN_LISTENER_ACCEPT : int = ...
PN_LISTENER_CLOSE : int = ...
PN_PROACTOR_INTERRUPT : int = ...
PN_PROACTOR_TIMEOUT : int = ...
PN_PROACTOR_INACTIVE : int = ...
PN_LISTENER_OPEN : int = ...

def pn_event_type_name(type): ...
def pn_collector(): ...
def pn_collector_free(collector): ...
def pn_collector_release(collector): ...
def pn_collector_drain(collector): ...
def pn_collector_put(collector, clazz, context, type): ...
def pn_collector_peek(collector): ...
def pn_collector_pop(collector): ...
def pn_collector_next(collector): ...
def pn_collector_prev(collector): ...
def pn_collector_more(collector): ...
def pn_event_type(event): ...
def pn_event_class(event): ...
def pn_event_context(event): ...
def pn_event_connection(event): ...
def pn_event_session(event): ...
def pn_event_link(event): ...
def pn_event_delivery(event): ...
def pn_event_transport(event): ...
def pn_event_attachments(event): ...
def pn_event_condition(event): ...
def pn_event_batch_next(batch): ...
def pn_event_copy(evt): ...

# PROTON_MESSAGE_H

PN_DEFAULT_PRIORITY : int = ...

def pn_message(): ...
def pn_message_free(msg): ...
def pn_message_clear(msg): ...
def pn_message_errno(msg): ...
def pn_message_error(msg): ...
def pn_message_is_inferred(msg): ...
def pn_message_set_inferred(msg, inferred): ...
def pn_message_is_durable(msg): ...
def pn_message_set_durable(msg, durable): ...
def pn_message_get_priority(msg): ...
def pn_message_set_priority(msg, priority): ...
def pn_message_get_ttl(msg): ...
def pn_message_set_ttl(msg, ttl): ...
def pn_message_is_first_acquirer(msg): ...
def pn_message_set_first_acquirer(msg, first): ...
def pn_message_get_delivery_count(msg): ...
def pn_message_set_delivery_count(msg, count): ...
def pn_message_id(msg): ...
def pn_message_get_user_id(msg): ...
def pn_message_set_user_id(msg, user_id): ...
def pn_message_get_address(msg): ...
def pn_message_set_address(msg, address): ...
def pn_message_get_subject(msg): ...
def pn_message_set_subject(msg, subject): ...
def pn_message_get_reply_to(msg): ...
def pn_message_set_reply_to(msg, reply_to): ...
def pn_message_correlation_id(msg): ...
def pn_message_get_content_type(msg): ...
def pn_message_set_content_type(msg, type): ...
def pn_message_get_content_encoding(msg): ...
def pn_message_set_content_encoding(msg, encoding): ...
def pn_message_get_expiry_time(msg): ...
def pn_message_set_expiry_time(msg, time): ...
def pn_message_get_creation_time(msg): ...
def pn_message_set_creation_time(msg, time): ...
def pn_message_get_group_id(msg): ...
def pn_message_set_group_id(msg, group_id): ...
def pn_message_get_group_sequence(msg): ...
def pn_message_set_group_sequence(msg, n): ...
def pn_message_get_reply_to_group_id(msg): ...
def pn_message_set_reply_to_group_id(msg, reply_to_group_id): ...
def pn_message_instructions(msg): ...
def pn_message_annotations(msg): ...
def pn_message_properties(msg): ...
def pn_message_body(msg): ...
def pn_message_send(msg, sender, buf): ...
def pn_message_data(msg, data): ...

# PROTON_SASL_H

PN_SASL_NONE : int = ...
PN_SASL_OK : int = ...
PN_SASL_AUTH : int = ...
PN_SASL_SYS : int = ...
PN_SASL_PERM : int = ...
PN_SASL_TEMP : int = ...

def pn_sasl(transport): ...
def pn_sasl_extended(): ...
def pn_sasl_done(sasl, outcome): ...
def pn_sasl_outcome(sasl): ...
def pn_sasl_get_user(sasl): ...
def pn_sasl_get_mech(sasl): ...
def pn_sasl_allowed_mechs(sasl, mechs): ...
def pn_sasl_set_allow_insecure_mechs(sasl, insecure): ...
def pn_sasl_get_allow_insecure_mechs(sasl): ...
def pn_sasl_config_name(sasl, name): ...
def pn_sasl_config_path(sasl, path): ...

# PROTON_MESSENGER_H

PN_STATUS_UNKNOWN : int = ...
PN_STATUS_PENDING : int = ...
PN_STATUS_ACCEPTED : int = ...
PN_STATUS_REJECTED : int = ...
PN_STATUS_RELEASED : int = ...
PN_STATUS_MODIFIED : int = ...
PN_STATUS_ABORTED : int = ...
PN_STATUS_SETTLED : int = ...

def pn_messenger(name): ...
def pn_messenger_name(messenger): ...
def pn_messenger_set_certificate(messenger, certificate): ...
def pn_messenger_get_certificate(messenger): ...
def pn_messenger_set_private_key(messenger, private_key): ...
def pn_messenger_get_private_key(messenger): ...
def pn_messenger_set_password(messenger, password): ...
def pn_messenger_get_password(messenger): ...
def pn_messenger_set_trusted_certificates(messenger, cert_db): ...
def pn_messenger_get_trusted_certificates(messenger): ...
def pn_messenger_set_timeout(messenger, timeout): ...
def pn_messenger_get_timeout(messenger): ...
def pn_messenger_is_blocking(messenger): ...
def pn_messenger_set_blocking(messenger, blocking): ...
def pn_messenger_is_passive(messenger): ...
def pn_messenger_set_passive(messenger, passive): ...
def pn_messenger_free(messenger): ...
def pn_messenger_errno(messenger): ...
def pn_messenger_error(messenger): ...
def pn_messenger_get_outgoing_window(messenger): ...
def pn_messenger_set_outgoing_window(messenger, window): ...
def pn_messenger_get_incoming_window(messenger): ...
def pn_messenger_set_incoming_window(messenger, window): ...
def pn_messenger_start(messenger): ...
def pn_messenger_stop(messenger): ...
def pn_messenger_stopped(messenger): ...
def pn_messenger_subscribe(messenger, source): ...
def pn_messenger_subscribe_ttl(messenger, source, timeout): ...
def pn_messenger_get_link(messenger, address, sender): ...
def pn_subscription_get_context(sub): ...
def pn_subscription_set_context(sub, context): ...
def pn_subscription_address(sub): ...
def pn_messenger_put(messenger, msg): ...
def pn_messenger_status(messenger, tracker): ...
def pn_messenger_delivery(messenger, tracker): ...
def pn_messenger_buffered(messenger, tracker): ...
def pn_messenger_settle(messenger, tracker, flags): ...
def pn_messenger_outgoing_tracker(messenger): ...
def pn_messenger_work(messenger, timeout): ...
def pn_messenger_interrupt(messenger): ...
def pn_messenger_send(messenger, n): ...
def pn_messenger_recv(messenger, limit): ...
def pn_messenger_receiving(messenger): ...
def pn_messenger_get(messenger, message): ...
def pn_messenger_incoming_tracker(messenger): ...
def pn_messenger_incoming_subscription(messenger): ...
PN_CUMULATIVE : int = ...

def pn_messenger_accept(messenger, tracker, flags): ...
def pn_messenger_reject(messenger, tracker, flags): ...
def pn_messenger_tracker_link(messenger, tracker): ...
def pn_messenger_outgoing(messenger): ...
def pn_messenger_incoming(messenger): ...
def pn_messenger_route(messenger, pattern, address): ...
def pn_messenger_rewrite(messenger, pattern, address): ...
def pn_messenger_selectable(messenger): ...
def pn_messenger_deadline(messenger): ...
PN_FLAGS_CHECK_ROUTES : int = ...
PN_FLAGS_ALLOW_INSECURE_MECHS : int = ...

def pn_messenger_set_flags(messenger, flags): ...
def pn_messenger_get_flags(messenger): ...
def pn_messenger_set_snd_settle_mode(messenger, mode): ...
def pn_messenger_set_rcv_settle_mode(messenger, mode): ...
def pn_messenger_set_tracer(messenger, tracer): ...
def pn_messenger_get_remote_idle_timeout(messenger, address): ...
def pn_messenger_set_ssl_peer_authentication_mode(messenger, mode): ...

# PROTON_SELECTABLE_H

PN_INVALID_SOCKET : int = ...

def pn_selectables(): ...
def pn_selectables_next(selectables): ...
def pn_selectables_free(selectables): ...
def pn_selectable(): ...
def pn_selectable_on_readable(sel, readable): ...
def pn_selectable_on_writable(sel, writable): ...
def pn_selectable_on_expired(sel, expired): ...
def pn_selectable_on_error(sel, error): ...
def pn_selectable_on_release(sel, release): ...
def pn_selectable_on_finalize(sel, finalize): ...
def pn_selectable_attachments(sel): ...
def pn_selectable_get_fd(selectable): ...
def pn_selectable_set_fd(selectable, fd): ...
def pn_selectable_is_reading(selectable): ...
def pn_selectable_set_reading(sel, reading): ...
def pn_selectable_is_writing(selectable): ...
def pn_selectable_set_writing(sel, writing): ...
def pn_selectable_get_deadline(selectable): ...
def pn_selectable_set_deadline(sel, deadline): ...
def pn_selectable_readable(selectable): ...
def pn_selectable_writable(selectable): ...
def pn_selectable_error(selectable): ...
def pn_selectable_expired(selectable): ...
def pn_selectable_is_registered(selectable): ...
def pn_selectable_set_registered(selectable, registered): ...
def pn_selectable_is_terminal(selectable): ...
def pn_selectable_terminate(selectable): ...
def pn_selectable_release(selectable): ...
def pn_selectable_free(selectable): ...
def pn_selectable_collect(selectable, collector): ...

# PROTON_SSL_H

PN_SSL_MODE_CLIENT : int = ...
PN_SSL_MODE_SERVER : int = ...
PN_SSL_RESUME_UNKNOWN : int = ...
PN_SSL_RESUME_NEW : int = ...
PN_SSL_RESUME_REUSED : int = ...

def pn_ssl_present(): ...
def pn_ssl_domain(mode): ...
def pn_ssl_domain_free(domain): ...
def pn_ssl_domain_set_credentials(domain, credential_1, credential_2, password): ...
def pn_ssl_domain_set_trusted_ca_db(domain, certificate_db): ...
PN_SSL_VERIFY_NULL : int = ...
PN_SSL_VERIFY_PEER : int = ...
PN_SSL_ANONYMOUS_PEER : int = ...
PN_SSL_VERIFY_PEER_NAME : int = ...

def pn_ssl_domain_set_peer_authentication(domain, mode, trusted_CAs): ...
def pn_ssl_domain_set_protocols(domain, protocols): ...
def pn_ssl_domain_set_ciphers(domain, ciphers): ...
def pn_ssl_domain_allow_unsecured_client(domain): ...
def pn_ssl(transport): ...
def pn_ssl_init(ssl, domain, session_id): ...
def pn_ssl_get_ssf(ssl): ...
def pn_ssl_resume_status(ssl): ...
def pn_ssl_set_peer_hostname(ssl, hostname): ...
def pn_ssl_get_remote_subject(ssl): ...
PN_SSL_CERT_SUBJECT_COUNTRY_NAME : int = ...
PN_SSL_CERT_SUBJECT_STATE_OR_PROVINCE : int = ...
PN_SSL_CERT_SUBJECT_CITY_OR_LOCALITY : int = ...
PN_SSL_CERT_SUBJECT_ORGANIZATION_NAME : int = ...
PN_SSL_CERT_SUBJECT_ORGANIZATION_UNIT : int = ...
PN_SSL_CERT_SUBJECT_COMMON_NAME : int = ...
PN_SSL_SHA1 : int = ...
PN_SSL_SHA256 : int = ...
PN_SSL_SHA512 : int = ...
PN_SSL_MD5 : int = ...

# PROTON_CODEC_H

PN_NULL : int = ...
PN_BOOL : int = ...
PN_UBYTE : int = ...
PN_BYTE : int = ...
PN_USHORT : int = ...
PN_SHORT : int = ...
PN_UINT : int = ...
PN_INT : int = ...
PN_CHAR : int = ...
PN_ULONG : int = ...
PN_LONG : int = ...
PN_TIMESTAMP : int = ...
PN_FLOAT : int = ...
PN_DOUBLE : int = ...
PN_DECIMAL32 : int = ...
PN_DECIMAL64 : int = ...
PN_DECIMAL128 : int = ...
PN_UUID : int = ...
PN_BINARY : int = ...
PN_STRING : int = ...
PN_SYMBOL : int = ...
PN_DESCRIBED : int = ...
PN_ARRAY : int = ...
PN_LIST : int = ...
PN_MAP : int = ...
PN_INVALID : int = ...

def pn_type_name(type): ...
def pn_data(capacity): ...
def pn_data_free(data): ...
def pn_data_errno(data): ...
def pn_data_error(data): ...
def pn_data_fill(data, fmt): ...
def pn_data_scan(data, fmt): ...
def pn_data_clear(data): ...
def pn_data_size(data): ...
def pn_data_rewind(data): ...
def pn_data_next(data): ...
def pn_data_prev(data): ...
def pn_data_enter(data): ...
def pn_data_exit(data): ...
def pn_data_lookup(data, name): ...
def pn_data_type(data): ...
def pn_data_print(data): ...
def pn_data_encoded_size(data): ...
def pn_data_put_list(data): ...
def pn_data_put_map(data): ...
def pn_data_put_array(data, described, type): ...
def pn_data_put_described(data): ...
def pn_data_put_null(data): ...
def pn_data_put_bool(data, b): ...
def pn_data_put_ubyte(data, ub): ...
def pn_data_put_byte(data, b): ...
def pn_data_put_ushort(data, us): ...
def pn_data_put_short(data, s): ...
def pn_data_put_uint(data, ui): ...
def pn_data_put_int(data, i): ...
def pn_data_put_char(data, c): ...
def pn_data_put_ulong(data, ul): ...
def pn_data_put_long(data, l): ...
def pn_data_put_timestamp(data, t): ...
def pn_data_put_float(data, f): ...
def pn_data_put_double(data, d): ...
def pn_data_put_decimal32(data, d): ...
def pn_data_put_decimal64(data, d): ...
def pn_data_put_decimal128(data, d): ...
def pn_data_put_uuid(data, u): ...
def pn_data_put_binary(data, bytes): ...
def pn_data_put_string(data, string): ...
def pn_data_put_symbol(data, symbol): ...
def pn_data_get_list(data): ...
def pn_data_get_map(data): ...
def pn_data_get_array(data): ...
def pn_data_is_array_described(data): ...
def pn_data_get_array_type(data): ...
def pn_data_is_described(data): ...
def pn_data_is_null(data): ...
def pn_data_get_bool(data): ...
def pn_data_get_ubyte(data): ...
def pn_data_get_byte(data): ...
def pn_data_get_ushort(data): ...
def pn_data_get_short(data): ...
def pn_data_get_uint(data): ...
def pn_data_get_int(data): ...
def pn_data_get_char(data): ...
def pn_data_get_ulong(data): ...
def pn_data_get_long(data): ...
def pn_data_get_timestamp(data): ...
def pn_data_get_float(data): ...
def pn_data_get_double(data): ...
def pn_data_get_decimal32(data): ...
def pn_data_get_decimal64(data): ...
def pn_data_get_decimal128(data): ...
def pn_data_get_uuid(data): ...
def pn_data_get_binary(data): ...
def pn_data_get_string(data): ...
def pn_data_get_symbol(data): ...
def pn_data_get_bytes(data): ...
def pn_data_copy(data, src): ...
def pn_data_append(data, src): ...
def pn_data_appendn(data, src, limit): ...
def pn_data_narrow(data): ...
def pn_data_widen(data): ...
def pn_data_point(data): ...
def pn_data_restore(data, point): ...
def pn_data_dump(data): ...
def pn_cast_pn_connection(x): ...
def pn_cast_pn_session(x): ...
def pn_cast_pn_link(x): ...
def pn_cast_pn_delivery(x): ...
def pn_cast_pn_transport(x): ...
def pn_cast_pn_reactor(x): ...
def pn_cast_pn_task(x): ...
def pn_cast_pn_selectable(x): ...

# PROTON_CONNECTION_DRIVER_H

def pn_connection_driver_init(arg1, arg2, arg3): ...
def pn_connection_driver_bind(d): ...
def pn_connection_driver_destroy(arg1): ...
def pn_connection_driver_release_connection(d): ...
def pn_connection_driver_read_buffer(arg1): ...
def pn_connection_driver_read_done(arg1, n): ...
def pn_connection_driver_read_close(arg1): ...
def pn_connection_driver_read_closed(arg1): ...
def pn_connection_driver_write_buffer(arg1): ...
def pn_connection_driver_write_done(arg1, n): ...
def pn_connection_driver_write_close(arg1): ...
def pn_connection_driver_write_closed(arg1): ...
def pn_connection_driver_close(c): ...
def pn_connection_driver_next_event(arg1): ...
def pn_connection_driver_has_event(arg1): ...
def pn_connection_driver_finished(arg1): ...
def pn_connection_driver_errorf(d, name, fmt): ...
def pn_event_batch_connection_driver(batch): ...
def pn_connection_driver_log(d, msg): ...
def pn_connection_driver_ptr(connection): ...

# PROTON_URL_H

def pn_url(): ...
def pn_url_parse(url): ...
def pn_url_free(url): ...
def pn_url_clear(url): ...
def pn_url_str(url): ...
def pn_url_get_scheme(url): ...
def pn_url_get_username(url): ...
def pn_url_get_password(url): ...
def pn_url_get_host(url): ...
def pn_url_get_port(url): ...
def pn_url_get_path(url): ...
def pn_url_set_scheme(url, scheme): ...
def pn_url_set_username(url, username): ...
def pn_url_set_password(url, password): ...
def pn_url_set_host(url, host): ...
def pn_url_set_port(url, port): ...
def pn_url_set_path(url, path): ...

# PROTON_REACTOR_H

def pn_handler(dispatch): ...
def pn_handler_new(dispatch, size, finalize): ...
def pn_handler_free(handler): ...
def pn_handler_mem(handler): ...
def pn_handler_add(handler, child): ...
def pn_handler_clear(handler): ...
def pn_handler_dispatch(handler, event, type): ...
def pn_reactor(): ...
def pn_reactor_attachments(reactor): ...
def pn_reactor_get_timeout(reactor): ...
def pn_reactor_set_timeout(reactor, timeout): ...
def pn_reactor_mark(reactor): ...
def pn_reactor_now(reactor): ...
def pn_reactor_yield(reactor): ...
def pn_reactor_free(reactor): ...
def pn_reactor_collector(reactor): ...
def pn_reactor_get_global_handler(reactor): ...
def pn_reactor_set_global_handler(reactor, handler): ...
def pn_reactor_get_handler(reactor): ...
def pn_reactor_set_handler(reactor, handler): ...
def pn_reactor_children(reactor): ...
def pn_reactor_selectable(reactor): ...
def pn_reactor_update(reactor, selectable): ...
def pn_reactor_acceptor(reactor, host, port, handler): ...
def pn_reactor_error(reactor): ...
def pn_reactor_connection_to_host(reactor, host, port, handler): ...
def pn_reactor_connection(reactor, handler): ...
def pn_reactor_set_connection_host(reactor, connection, host, port): ...
def pn_reactor_get_connection_address(reactor, connection): ...
def pn_reactor_wakeup(reactor): ...
def pn_reactor_start(reactor): ...
def pn_reactor_quiesced(reactor): ...
def pn_reactor_process(reactor): ...
def pn_reactor_stop(reactor): ...
def pn_reactor_run(reactor): ...
def pn_reactor_schedule(reactor, delay, handler): ...
def pn_acceptor_set_ssl_domain(acceptor, domain): ...
def pn_acceptor_close(acceptor): ...
def pn_connection_acceptor(connection): ...
def pn_timer(collector): ...
def pn_timer_deadline(timer): ...
def pn_timer_tick(timer, now): ...
def pn_timer_schedule(timer, deadline): ...
def pn_timer_tasks(timer): ...
def pn_task_attachments(task): ...
def pn_task_cancel(task): ...
def pn_class_reactor(clazz, object): ...
def pn_object_reactor(object): ...
def pn_event_reactor(event): ...
def pn_record_get_handler(record): ...
def pn_record_set_handler(record, handler): ...
def pn_event_root(event): ...

# PROTON_HANDLERS_H

def pn_handshaker(): ...
def pn_iohandler(): ...
def pn_flowcontroller(window): ...

# PROTON_CID_H

CID_pn_object : int = ...
CID_pn_void : int = ...
CID_pn_weakref : int = ...
CID_pn_string : int = ...
CID_pn_list : int = ...
CID_pn_map : int = ...
CID_pn_hash : int = ...
CID_pn_record : int = ...
CID_pn_collector : int = ...
CID_pn_event : int = ...
CID_pn_encoder : int = ...
CID_pn_decoder : int = ...
CID_pn_data : int = ...
CID_pn_connection : int = ...
CID_pn_session : int = ...
CID_pn_link : int = ...
CID_pn_delivery : int = ...
CID_pn_transport : int = ...
CID_pn_message : int = ...
CID_pn_reactor : int = ...
CID_pn_handler : int = ...
CID_pn_timer : int = ...
CID_pn_task : int = ...
CID_pn_io : int = ...
CID_pn_selector : int = ...
CID_pn_selectable : int = ...
CID_pn_url : int = ...
CID_pn_listener : int = ...
CID_pn_proactor : int = ...
CID_pn_listener_socket : int = ...

pn_bytes_null : int = ...
pn_rwbytes_null : int = ...
PN_OBJECT : int = ...
PN_VOID : int = ...
PN_WEAKREF : int = ...

# 
