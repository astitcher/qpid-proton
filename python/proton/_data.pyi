from typing import (
    Any,
    Dict,
    List,
    Optional,
    Tuple,
    Union,
)
from cproton import pn_data_t
from proton._common import Constant
from uuid import UUID

class UnmappedType:
    def __init__(self, msg: str) -> None: ...


class ulong(int): ...
class timestamp(int): ...
class symbol(str): ...
class char(str): ...
class byte(int): ...
class short(int): ...
class int32(int): ...
class ubyte(int): ...
class ushort(int): ...
class uint(int): ...
class float32(float): ...
class decimal32(int): ...
class decimal64(int): ...
class decimal128(bytes): ...

class Described:
    def __init__(
        self,
        descriptor: Union[ulong, str],
        value: Union[List[Union[None, str, uint]], str]
    ) -> None: ...

UNDESCRIBED: Constant = ...

class Array:
    def __init__(self, descriptor: Union[Constant, str], type: int, *elements: Any) -> None: ...


class Data:
    def __del__(self) -> None: ...
    def __init__(self, dimp: Union[pn_data_t, int] = 16) -> None: ...
    def _check(self, err: int) -> int: ...
    def clear(self) -> None: ...
    def copy(self, src: Data) -> None: ...
    def decode(self, encoded: bytes) -> int: ...
    def encode(self) -> bytes: ...
    def encoded_size(self) -> int: ...
    def enter(self) -> bool: ...
    def exit(self) -> bool: ...
    def format(self) -> str: ...
    def get_array(self) -> Tuple[int, bool, int]: ...
    def get_binary(self) -> bytes: ...
    def get_bool(self) -> bool: ...
    def get_byte(self) -> byte: ...
    def get_char(self) -> char: ...
    def get_decimal128(self) -> decimal128: ...
    def get_decimal32(self) -> decimal32: ...
    def get_decimal64(self) -> decimal64: ...
    def get_dict(self) -> Any: ...
    def get_double(self) -> float: ...
    def get_float(self) -> float32: ...
    def get_int(self) -> int32: ...
    def get_list(self) -> int: ...
    def get_long(self) -> int: ...
    def get_object(self) -> Any: ...
    def get_py_array(self) -> Array: ...
    def get_py_described(self) -> Described: ...
    def get_sequence(self) -> Any: ...
    def get_short(self) -> short: ...
    def get_string(self) -> str: ...
    def get_symbol(self) -> symbol: ...
    def get_timestamp(self) -> timestamp: ...
    def get_ubyte(self) -> ubyte: ...
    def get_uint(self) -> uint: ...
    def get_ulong(self) -> ulong: ...
    def get_ushort(self) -> ushort: ...
    def get_uuid(self) -> UUID: ...
    def lookup(self, name: str) -> bool: ...
    def narrow(self) -> None: ...
    def next(self) -> Optional[int]: ...
    def put_array(self, described: bool, element_type: int) -> None: ...
    def put_binary(self, b: bytes) -> None: ...
    def put_bool(self, b: bool) -> None: ...
    def put_byte(self, b: int) -> None: ...
    def put_char(self, c: char) -> None: ...
    def put_decimal128(self, d: decimal128) -> None: ...
    def put_decimal32(self, d: decimal32) -> None: ...
    def put_decimal64(self, d: decimal64) -> None: ...
    def put_described(self) -> None: ...
    def put_dict(self, d: Dict[Union[ulong, str, symbol], Any]) -> None: ...
    def put_double(self, d: float) -> None: ...
    def put_float(self, f: float) -> None: ...
    def put_int(self, i: int) -> None: ...
    def put_list(self) -> None: ...
    def put_long(self, l: int) -> None: ...
    def put_map(self) -> None: ...
    def put_memoryview(self, mv: memoryview) -> None: ...
    def put_null(self) -> None: ...
    def put_object(self, obj: Any) -> None: ...
    def put_py_array(self, a: Array) -> None: ...
    def put_py_described(self, d: Described) -> None: ...
    def put_sequence(self, s: Any) -> None: ...
    def put_short(self, s: int) -> None: ...
    def put_string(self, s: str) -> None: ...
    def put_symbol(self, s: str) -> None: ...
    def put_timestamp(self, t: timestamp) -> None: ...
    def put_ubyte(self, ub: int) -> None: ...
    def put_uint(self, ui: int) -> None: ...
    def put_ulong(self, ul: int) -> None: ...
    def put_ushort(self, us: int) -> None: ...
    def put_uuid(self, u: UUID) -> None: ...
    def rewind(self) -> None: ...
    def type(self) -> Optional[int]: ...
    def widen(self) -> None: ...

def dat2obj(dimpl: Optional[Union[pn_data_t, int]]) -> Optional[Any]: ...
def obj2dat(obj: Optional[Any], dimpl: Union[pn_data_t, int]) -> Data: ...
