from typing import (
    Dict,
    List,
    Optional,
    Type,
    Union,
)

from proton._condition import Condition
from proton._endpoints import (
    Receiver,
    Sender,
)


class NamedInt(int):
    @staticmethod
    def __new__(cls: Type[NamedInt], i: int, name: str) -> int: ...
    def __init__(self, i: int, name: str) -> None: ...
    def __repr__(self) -> str : ...
    def __str__(self) -> str: ...
    @classmethod
    def get(cls, i: int) -> Union[int, str]: ...


class DispositionType(NamedInt): ...


class Disposition:
    RECEIVED: DispositionType
    ACCEPTED: DispositionType
    REJECTED: DispositionType
    RELEASED: DispositionType
    MODIFIED: DispositionType

    def _get_annotations(self) -> Optional[Dict[str, str]]: ...
    def _get_condition(self) -> Optional[Condition]: ...
    def _get_data(self) -> Optional[List[int]]: ...
    def _get_failed(self) -> bool: ...
    def _get_section_number(self) -> int: ...
    def _get_section_offset(self) -> int: ...
    def _get_undeliverable(self) -> bool: ...
    def _set_annotations(self, obj: Dict[str, str]) -> None: ...
    def _set_condition(self, obj: Condition) -> None: ...
    def _set_data(self, obj: List[int]) -> None: ...
    def _set_failed(self, b: bool) -> None: ...
    def _set_section_number(self, n: int) -> None: ...
    def _set_section_offset(self, n: int) -> None: ...
    def _set_undeliverable(self, b: bool) -> None: ...
    @property
    def type(self) -> int: ...


class Delivery:
    RECEIVED: DispositionType
    ACCEPTED: DispositionType
    REJECTED: DispositionType
    RELEASED: DispositionType
    MODIFIED: DispositionType

    def _init(self) -> None: ...
    @property
    def aborted(self) -> bool: ...
    @property
    def link(self) -> Union[Sender, Receiver]: ...
    @property
    def local_state(self) -> DispositionType: ...
    @property
    def partial(self) -> bool: ...
    @property
    def pending(self) -> int: ...
    @property
    def readable(self) -> bool: ...
    @property
    def remote_state(self) -> int: ...
    def settle(self) -> None: ...
    @property
    def settled(self) -> bool: ...
    @property
    def tag(self) -> str: ...
    def update(self, state: int) -> None: ...
    @property
    def updated(self) -> bool: ...
    @property
    def work_next(self) -> Optional[Delivery]: ...
    @staticmethod
    def wrap(impl: None) -> None: ...
    @property
    def writable(self) -> bool: ...
