from typing import (
    Any,
    Callable,
    Dict,
    List,
    Optional,
)

from proton._delivery import Delivery
from proton._endpoints import Connection, Receiver
from proton._reactor import Container
from proton._transport import Transport
from proton._wrapper import Wrapper


def _core(number: int, method: str) -> EventType: ...


def _dispatch(handler: object, method: str, *args: Any) -> None: ...


class Collector:
    def __del__(self) -> None: ...
    def __init__(self) -> None: ...
    def peek(self) -> Optional[Event]: ...
    def pop(self) -> None: ...

class EventBase:
    def __init__(self, clazz: str, context: Any, type: Optional[EventType]) -> None: ...
    def dispatch(self, handler: object) -> None: ...

wrappers: Dict[str, Callable] = ...

class Event(Wrapper, EventBase):
    @staticmethod
    def wrap(impl: None, number: None = None) -> None: ...

    def __getattr__(self, name: str) -> Any: ...
    def _init(self) -> None: ...
    @property
    def clazz(self) -> str: ...
    @property
    def connection(self) -> Optional[Connection]: ...
    @property
    def context(self) -> Delivery: ...
    @property
    def delivery(self) -> Delivery: ...
    def dispatch(self, handler: object, type: Optional[EventType] = None) -> None: ...
    @property
    def link(self) -> Receiver: ...
    @property
    def reactor(self) -> Container: ...
    @property
    def transport(self) -> Transport: ...


class EventType:
    def __init__(self, name: Optional[str] = None, number: Optional[int] = None, method: Optional[str] = None) -> None: ...


class Handler:
    def on_unhandled(self, method: str, *args: Any) -> None: ...


class LazyHandlers:
    def __get__(self, obj: Handler, clazz: Any) -> List[Any]: ...


class TypeExtender:
    def __init__(self, number: int) -> None: ...
    def next(self) -> int: ...
