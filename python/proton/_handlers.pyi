from proton._delivery import Delivery
from proton._endpoints import Connection
from proton._events import Event, Handler
from proton._exceptions import ProtonException
from proton._message import Message


def recv_msg(delivery: Delivery) -> Message: ...


class EndpointStateHandler(Handler):
    @classmethod
    def is_local_closed(cls, endpoint: Connection) -> int: ...
    @classmethod
    def is_local_open(cls, endpoint: Connection) -> int: ...
    @classmethod
    def is_local_uninitialised(cls, endpoint: Connection) -> int: ...
    @classmethod
    def is_remote_open(cls, endpoint: Connection) -> int: ...
    def on_connection_closed(self, event: Event) -> None: ...
    def on_connection_closing(self, event: Event) -> None: ...
    def on_connection_local_open(self, event: Event) -> None: ...
    def on_connection_opened(self, event: Event) -> None: ...
    def on_connection_opening(self, event: Event) -> None: ...
    def on_connection_remote_close(self, event: Event) -> None: ...
    def on_connection_remote_open(self, event: Event) -> None: ...
    def on_transport_closed(self, event: Event) -> None: ...
    def on_transport_tail_closed(self, event: Event) -> None: ...


class FlowController(Handler):
    def __init__(self, window: int = 1024) -> None: ...


class Acking: ...


class IncomingMessageHandler(Handler, Acking):
    def __init__(self, auto_accept: bool = True, delegate: None = None) -> None: ...
    def on_delivery(self, event: Event) -> None: ...


class MessagingHandler(Handler, Acking):
    def __init__(
        self,
        prefetch: int = 10,
        auto_accept: bool = True,
        auto_settle: bool = True,
        peer_close_is_error: bool = False
    ) -> None: ...
    def on_connection_closed(self, event: Event) -> None: ...
    def on_reactor_init(self, event: Event) -> None: ...

class OutgoingMessageHandler(Handler): ...
class TransactionHandler: ...
class TransactionalClientHandler(MessagingHandler, TransactionHandler): ...
class Reject(ProtonException): ...
class Release(ProtonException): ...
class Handshaker(Handler): ...
class IOHandler(Handler): ...
class PythonIO: ...
